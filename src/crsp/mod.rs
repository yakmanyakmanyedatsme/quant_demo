pub mod csv_crsp_reader {
    use serde::Deserialize;
    use std::fmt::Debug;
    use polars::prelude::*;
    use std::path::PathBuf;
    use polars::datatypes::DataType::{self,UInt8,UInt16,Int64,Float64,Date,Utf8};
    use chrono::NaiveDate;

    pub static CRSP_DTYPES: [DataType;63] = [UInt8, UInt8, UInt8, Int64, Int64, Int64,
        UInt8, UInt8, UInt8, UInt8, UInt8, Int64, UInt8, UInt8, UInt8, Int64, Int64, Int64,
        Int64, UInt8, UInt8, Float64, UInt8, Int64, UInt8, UInt8, UInt8, Int64, Int64,
        Int64, Int64, Float64, Float64, Float64, Int64, Int64, UInt8, Int64, Float64,
        Float64, Float64, Int64, UInt8, Int64, Int64, Float64, Float64, Float64, Int64,
        UInt8, Float64, Float64, Int64, Float64, Float64, Float64, UInt8, UInt8, Float64,
        Float64, Float64, Float64, Float64];
  
    pub async fn get_test_crsp_schema() -> Option<Schema>{
        let crsp_schema: Schema = Schema::from_iter([
                                                        Field::new("PERMNO", Int64),
                                                        Field::new("date", Date),
                                                        Field::new("SICCD", Date),
                                                        Field::new("TICKER", Utf8),
                                                        Field::new("COMNAM", Utf8),
                                                        Field::new("SHRCLS", Utf8),
                                                        Field::new("PERMCO", Utf8),
                                                        Field::new("PRC", Float64),
                                                        Field::new("VOL", Int64),
                                                        Field::new("RET", Utf8),
                                                        Field::new("SHROUT", Int64),
                                                        Field::new("NUMRTD", Int64),
                                                        Field::new("RETX", Utf8),
                                                    ]);
        Some(crsp_schema)
    }

    pub async fn get_full_crsp_schema() -> Option<Schema>{
        let crsp_schema: Schema = Schema::from_iter([
        Field::new("PERMNO", Int64),
        Field::new("date", Date),
        Field::new("NAMEENDT", Date),
        Field::new("SHRCD", Int64),
        Field::new("EXCHCD", Int64),
        Field::new("SICCD", Int64),
        Field::new("NCUSIP", Utf8),
        Field::new("TICKER", Utf8),
        Field::new("COMNAM", Utf8),
        Field::new("SHRCLS", Int64),
        Field::new("TSYMBOL", Utf8),
        Field::new("NAICS", Utf8),
        Field::new("PRIMEXCH",Utf8),
        Field::new("TRDSTAT", Utf8),
        Field::new("SECSTAT", Utf8),
        Field::new("PERMCO", Int64),
        Field::new("ISSUNO", Int64),
        Field::new("HEXCD", Int64),
        Field::new("HSICCD", Int64),
        Field::new("CUSIP", Utf8),
        Field::new("DCLRDT", Date),
        Field::new("DLAMT", Float64),
        Field::new("DLPDT", Date),
        Field::new("DLSTCD", Int64),
        Field::new("NEXTDT", Date),
        Field::new("PAYDT", Date),
        Field::new("RCRDDT", Date),
        Field::new("SHRFLG", Int64),
        Field::new("HSICMG", Int64),
        Field::new("HSICIG", Int64),
        Field::new("DISTCD", Int64),
        Field::new("DIVAMT", Float64),
        Field::new("FACPR", Float64),
        Field::new("FACSHR", Float64),
        Field::new("ACPERM", Int64),
        Field::new("ACCOMP", Int64),
        Field::new("SHRENDDT", Date),
        Field::new("NWPERM", Int64),
        Field::new("DLRETX", Float64),
        Field::new("DLPRC", Float64),
        Field::new("DLRET", Float64),
        Field::new("TRTSCD", Int64),
        Field::new("NMSIND", Int64),
        Field::new("MMCNT", Int64),
        Field::new("NSDINX", Int64),
        Field::new("BIDLO", Float64),
        Field::new("ASKHI", Float64),
        Field::new("PRC", Float64),
        Field::new("VOL", Int64),
        Field::new("RET", Float64),
        Field::new("BID", Float64),
        Field::new("ASK", Float64),
        Field::new("SHROUT", Int64),
        Field::new("CFACPR", Float64),
        Field::new("CFACSHR", Float64),
        Field::new("OPENPRC", Float64),
        Field::new("NUMTRD", Int64),
        Field::new("RETX", Float64),
        Field::new("vwretd", Float64),
        Field::new("vwretx", Float64),
        Field::new("ewretd", Float64),
        Field::new("ewretx", Float64),
        Field::new("sprtrn", Float64),
    ]);
    Some(crsp_schema)
    }

    #[derive(Debug, Deserialize)]
    pub struct Record {
        PERMNO: i64,
        date: NaiveDate,
        NAMEENDT: NaiveDate,
        SHRCD: i64,
        EXCHCD: i64,
        SICCD: i64,
        NCUSIP: String,
        TICKER: String,
        COMNAM: String,
        SHRCLS: Option<String>,
        TSYMBOL: String,
        NAICS: i64,
        PRIMEXCH: String,
        TRDSTAT: String,
        SECSTAT: String,
        PERMCO: i64,
        ISSUNO: i64,
        HEXCD: i64,
        HSICCD: i64,
        CUSIP: String,
        DCLRDT: Option<NaiveDate>,
        DLAMT: Option<f64>,
        DLPDT: Option<NaiveDate>,
        DLSTCD: Option<i64>,
        NEXTDT: Option<NaiveDate>,
        PAYDT: Option<NaiveDate>,
        RCRDDT: Option<NaiveDate>,
        SHRFLG: Option<i64>,
        HSICMG: Option<i64>,
        HSICIG: Option<i64>,
        DISTCD: Option<i64>,
        DIVAMT: Option<f64>,
        FACPR: Option<f64>,
        FACSHR: Option<f64>,
        ACPERM: Option<i64>,
        ACCOMP: Option<i64>,
        SHRENDDT: Option<NaiveDate>,
        NWPERM: Option<i64>,
        DLRETX: Option<f64>,
        DLPRC: Option<f64>,
        DLRET: Option<f64>,
        TRTSCD: Option<i64>,
        NMSIND: Option<String>,
        MMCNT: Option<i64>,
        NSDINX: Option<i64>,
        BIDLO: f64,
        ASKHI: f64,
        PRC: f64,
        VOL: i64,
        RET: String,
        BID: f64,
        ASK: f64,
        SHROUT: i64,
        CFACPR: f64,
        CFACSHR: f64,
        OPENPRC: f64,
        NUMTRD: Option<String>,
        RETX: String,
        vwretd: f64,
        vwretx: f64,
        ewretd: f64,
        ewretx: f64,
        sprtrn: f64,
    }
}
